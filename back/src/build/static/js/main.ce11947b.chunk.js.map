{"version":3,"sources":["constants/timerStatus.ts","modules/timer/slice.ts","constants/predictionStatus.ts","modules/prediction/slice.ts","modules/reducer.ts","modules/prediction/selectors.ts","constants/endpoints.ts","modules/prediction/sagas.ts","modules/sagas.ts","modules/createStore.ts","modules/timer/selectors.ts","containers/Canvas/Canvas.tsx","containers/Timer/Timer.tsx","components/Button/Button.tsx","containers/AnswerSelect/AnswerSelect.tsx","containers/Header/Header.tsx","components/Footer/Footer.tsx","containers/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["TimerStatus","PredictionStatus","initialState","state","INITIAL","startTime","Date","getTime","milliseconds","slice","createSlice","name","reducers","abortTimer","action","ABORT","startTimer","WORKING","resetTimer","RESETTING","stopTimer","FINISH","updateTimer","actions","answers","answer","prediction","random","status","strokes","initialize","toggleRandom","setAnswers","payload","setAnswer","PREDICTION","setPrediction","fetchAnswers","FETCHING_ANSWERS","fetchPrediction","FETCHING_PREDICTION","pushStrokes","push","rootReducer","combineReducers","timer","timerReducer","predictionReducer","predictionSelectors","Endpoints","fetchAnswersAjax","axios","get","then","res","data","catch","error","call","put","select","console","log","fetchPredictionAjax","post","label","sagas","takeEvery","toString","rootSagas","all","predictionSagas","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","store","configureStore","reducer","run","timerSelectors","Canvas","useSelector","useBoundActions","useEffect","activeLine","renderPath","d3","x","d","y","curve","drag","on","svg","append","datum","attr","container","node","concat","style","remove","Container","id","dispatch","useDispatch","useMemo","bindActionCreators","timerActions","predictionActions","baseStyled","Grid","Timer","setTimeout","toFixed","StyledBaseButton","styled","button","props","color","Button","AnswerSelect","length","Switch","checked","onChange","disabled","e","target","value","map","i","Header","start","Math","floor","className","AnswerText","Wrapper","PredictionText","onClick","ResultText","div","h2","Footer","Credit","p","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce11947b.chunk.js","sourcesContent":["export enum TimerStatus {\n    FINISH = 'FINISH',\n    INITIAL = 'INITIAL',\n    ABORT = 'ABORT',\n    RESETTING = 'RESETTING',\n    WORKING = 'WORKING'\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { TimerStatus } from \"../../constants/timerStatus\"\n\nconst initialState = {\n    state: TimerStatus.INITIAL,\n    startTime: new Date().getTime(),\n    milliseconds: 0\n};\n\nconst slice = createSlice({\n    name: \"timer\",\n    initialState,\n    reducers: {\n        abortTimer: (state, action) => {\n            state.state = TimerStatus.ABORT;\n        },\n        startTimer: (state, action) => {\n            state.startTime = new Date().getTime();\n            state.state = TimerStatus.WORKING;\n        },\n        resetTimer: (state, action) => {\n            state.state = TimerStatus.RESETTING;\n            state.milliseconds = 0;\n        },\n        stopTimer: (state, action) => {\n            state.state = TimerStatus.FINISH;\n        },\n        updateTimer: (state, action) => {\n            state.milliseconds = new Date().getTime() - state.startTime;\n        }\n    }\n});\nexport const actions = {\n    ...slice.actions\n};\nexport default slice.reducer;\n","export enum PredictionStatus {\n    INITIAL = 'INITIAL',\n    FETCHING_ANSWERS = 'FETCHING_ANSWERS',\n    PREDICTION = 'PREDICTION',\n    FETCHING_PREDICTION = 'FETCHING_PREDICTION'\n}\n\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { PredictionStatus } from \"../../constants/predictionStatus\"\ntype State = {\n    answers: string[];\n    answer: string;\n    prediction: string;\n    random: boolean;\n    status: string;\n    strokes: number[][][];\n}\nconst initialState: State = {\n    answers: [],\n    answer: \"\",\n    prediction: \"-\",\n    random: true,\n    status: PredictionStatus.INITIAL,\n    strokes: []\n};\n\nconst slice = createSlice({\n    name: \"prediciton\",\n    initialState,\n    reducers: {\n        initialize: (state, action) => {\n            state.status = PredictionStatus.INITIAL;\n            state.prediction = \"-\";\n            state.strokes = [];\n        },\n        toggleRandom: (state, action) => {\n            state.random = !state.random;\n        },\n        setAnswers: (state, action) => {\n            state.answers = action.payload;\n        },\n        setAnswer: (state, action) => {\n            state.answer = action.payload;\n            state.status = PredictionStatus.PREDICTION;\n        },\n        setPrediction: (state, action: { payload: string; type: string } & {}) => {\n            state.prediction = action.payload;\n            state.status = PredictionStatus.PREDICTION;\n        },\n        fetchAnswers: (state, action) => {\n            state.status = PredictionStatus.FETCHING_ANSWERS;\n        },\n        fetchPrediction: (state, action) => {\n            state.status = PredictionStatus.FETCHING_PREDICTION;\n        },\n        pushStrokes: (state, action: { payload: number[][]; type: string } & {}) => {\n            state.strokes.push(action.payload)\n        }\n    }\n});\nexport const actions = {\n    ...slice.actions\n};\nexport default slice.reducer;\n","import { combineReducers } from \"redux\";\nimport timerReducer from \"./timer/slice\";\nimport predictionReducer from \"./prediction/slice\";\n\nexport interface RootState {\n    timer: ReturnType<typeof timerReducer>;\n    prediction: ReturnType<typeof predictionReducer>;\n}\n\nconst rootReducer = combineReducers({\n    timer: timerReducer,\n    prediction: predictionReducer\n});\n\nexport default rootReducer;\n","import { RootState } from \"../reducer\";\n\nconst predictionSelectors = (state: RootState) => state.prediction;\n\nexport default predictionSelectors;\n","export const Endpoints = {\n    answer: \"/api/v1/answers\",\n    prediction: \"/api/v1/predicts\"\n};\n","import { actions } from \"./slice\";\nimport axios from \"axios\"\nimport { put, call, select, takeEvery } from 'redux-saga/effects';\nimport { Endpoints } from \"../../constants/endpoints\";\nimport {predictionSelectors} from \"../../modules/prediction\";\n\nconst fetchAnswersAjax = () => {\n    return (axios.get(Endpoints.answer,\n    )\n        .then((res) => {\n            const data = res.data;\n            return { data }\n        })\n        .catch((error) => {\n            return { error }\n        }));\n\n};\n\nfunction* fetchAnswers() {\n    const { data, error } = yield call(fetchAnswersAjax);\n    if (data) {\n        yield put(actions.setAnswers(data));\n        const { answers } = yield select(predictionSelectors);\n        yield put(actions.setAnswer(answers[0]));\n    } else {\n        console.log(error);\n    }\n}\n\nconst fetchPredictionAjax = (strokes: number[][][]) => {\n    return (axios.post(Endpoints.prediction,\n        strokes\n)\n        .then((res) => {\n            const data = res.data;\n            return { data }\n        })\n        .catch((error) => {\n            return { error }\n        }));\n\n};\n\nfunction* fetchPrediction() {\n    const { strokes } = yield select(predictionSelectors);\n    const { data, error } = yield call(fetchPredictionAjax, strokes);\n    if (data) {\n        yield put(actions.setPrediction(data.label));\n    } else {\n        console.log(error);\n    }\n}\nexport const sagas = [\n    takeEvery(actions.fetchAnswers.toString(), fetchAnswers),\n    takeEvery(actions.fetchPrediction.toString(), fetchPrediction)\n];\n\n","import { all } from \"redux-saga/effects\";\nimport { predictionSagas } from \"./prediction\";\nexport function* rootSagas() {\n    yield all([...predictionSagas]);\n}\n","import rootReducer from \"./reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\nimport { rootSagas } from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [...getDefaultMiddleware(), sagaMiddleware];\nconst store = configureStore( {\n    reducer: rootReducer,\n    middleware,\n});\nexport default store;\nsagaMiddleware.run(rootSagas);\n","import { RootState } from \"../reducer\";\n\nconst timerSelectors = (state: RootState) => state.timer;\n\nexport default timerSelectors;\n","import React, {useEffect, useMemo} from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Grid } from \"@material-ui/core\";\nimport baseStyled from \"styled-components\";\nimport * as d3 from \"d3\";\nimport {TimerStatus} from \"../../constants/timerStatus\";\nimport {bindActionCreators} from \"redux\";\nimport {timerSelectors, timerActions} from \"../../modules/timer\";\nimport {predictionSelectors, predictionActions} from \"../../modules/prediction\";\n\nconst Canvas: React.FC = () => {\n    const { state } = useSelector(timerSelectors);\n    const { answer, prediction } = useSelector(predictionSelectors);\n    const { initialize, startTimer, fetchPrediction, stopTimer, pushStrokes } = useBoundActions();\n    let data: number[][] = [];\n\n    useEffect(() => {\n        const color = '#000';\n        const strokeWidth = '5px' ;\n        let activeLine: d3.Selection<SVGPathElement, never[], HTMLElement, any> | null;\n\n        const renderPath = d3.line()\n            .x(function(d) { return d[0]; })\n            .y(function(d) { return d[1]; })\n            .curve(d3.curveBasis);\n\n        const dragstarted = () => {\n            activeLine = svg.append('path')\n                .datum([])\n                .attr('class', 'line')\n                .attr('stroke',color)\n                .attr('stroke-width',strokeWidth)\n                .attr('fill','transparent')\n        };\n\n        const dragged = () => {\n            const container = d3.select<SVGGElement, unknown>(\"#canvas\").node();\n            if (!container) {\n                return;\n            }\n            if (!activeLine) {\n                return;\n            }\n            data.push(d3.mouse(container).concat([new Date().getTime()]));\n            activeLine.datum(data);\n            activeLine.attr('d', renderPath);\n        };\n\n        const dragended = () => {\n            pushStrokes(data);\n            fetchPrediction(null);\n            activeLine = null;\n            data = [];\n        };\n        const drag = d3.drag()\n            .on('start', dragstarted)\n            .on('drag', dragged)\n            .on('end', dragended);\n\n        const svg = d3.select('#canvas')\n            .style('width', '100%')\n            .style('height', '100%')\n            .style('border', 'solid 1px #707070')\n            .style('border-radius', '5px')\n            .call(\n                // @ts-ignore\n                drag\n            );\n\n        const clear = () => {\n            d3.selectAll('path.line').remove();\n            data = [];\n        };\n\n        if (answer === prediction) {\n            stopTimer(null);\n        }\n        if (state === TimerStatus.RESETTING) {\n            initialize(null);\n            clear();\n            startTimer(null);\n        }\n    }, [data]);\n    return (\n        <Container>\n            <svg id=\"canvas\"/>\n        </Container>\n    );\n};\n\nexport default Canvas;\n\n\nconst useBoundActions = () => {\n    const dispatch = useDispatch();\n    return useMemo(() => {\n        return bindActionCreators(\n            {\n                startTimer: timerActions.startTimer,\n                stopTimer: timerActions.stopTimer,\n                fetchPrediction: predictionActions.fetchPrediction,\n                initialize: predictionActions.initialize,\n                pushStrokes: predictionActions.pushStrokes,\n            },\n            dispatch\n        );\n    }, [dispatch]);\n};\n\nconst Container = baseStyled(Grid)`\n  flex: 1;\n  height: 70vh;\n  width: 90%;\n  margin: auto;\n  position: relative;\n`;\n\n","import React, { useEffect, useMemo } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { Grid } from \"@material-ui/core\";\nimport baseStyled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { timerSelectors, timerActions } from \"../../modules/timer\"\nimport {TimerStatus} from \"../../constants/timerStatus\";\n\nconst Timer: React.FC = () => {\n    const state = useSelector(timerSelectors);\n    const { updateTimer } = useBoundActions();\n    useEffect(() => {\n        if (state.state === TimerStatus.WORKING){\n            setTimeout(() => {\n                updateTimer(null);\n            }, 100);\n        }\n    });\n    return (\n        <Container>\n            <span>{(state.milliseconds/1000).toFixed(2)} 秒</span>\n        </Container>\n    );\n};\n\nexport default Timer;\n\nconst useBoundActions = () => {\n    const dispatch = useDispatch();\n    return useMemo(() => {\n        return bindActionCreators(\n            {\n                updateTimer: timerActions.updateTimer,\n            },\n            dispatch\n        );\n    }, [dispatch]);\n};\n\n\nconst Container = baseStyled(Grid)`\n  flex: 1;\n  width: 100%;\n  margin: auto;\n  position: relative;\n`;\n","import React from \"react\";\nimport styled, { CSSObject } from \"styled-components\";\n\nexport type ButtonProps = {\n    children?: React.ReactChild;\n    onClick?: () => void;\n    style?: CSSObject;\n    color?: \"primary\" | \"secondary\";\n};\n\n\n\nconst StyledBaseButton = styled.button<ButtonProps>`\n  left: 25%;\n  cursor: pointer;\n  border-width: 0;\n  padding: 5px;\n  margin: 5px;\n  font-family: \"NotoSansCJKjp\", monospace;\n  font-size: 20px;\n  border-radius: 5px;\n  width: 50%;\n  color: white;\n  background: ${props => (props.color === \"secondary\" ? \"yellowgreen\" : \"deeppink\")};\n  transition: background 0.5s;\n  ${props => props.style};\n`;\n\nexport const Button: React.FC<ButtonProps> = ({ ...props }) => (\n    <StyledBaseButton {...props} />\n);\n\nexport default Button;\n","import React, {ChangeEvent, useEffect, useMemo} from 'react';\nimport { bindActionCreators } from 'redux';\nimport { Grid, Switch } from \"@material-ui/core\";\nimport baseStyled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {predictionActions, predictionSelectors} from \"../../modules/prediction\";\n\nconst AnswerSelect: React.FC = () => {\n    const { answers, answer, random} = useSelector(predictionSelectors);\n    const { fetchAnswers, setAnswer, toggleRandom } = useBoundActions();\n    const onChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        setAnswer(e.target.value);\n    };\n    useEffect(() => {\n        if (answers.length === 0) {\n            fetchAnswers(null);\n        }\n    }, []);\n    return (\n        <Container>\n            出題:{\" \"}\n                ランダム<Switch checked={!random} onChange={() => toggleRandom(null)} color=\"default\" />選択\n                <select disabled={random} onChange={onChange} value={answer}>\n                {answers.map((d, i) => {\n                return(<option value={d}>{i+1}: {d}</option>);\n            })}</select>\n        </Container>\n    );\n};\n\nexport default AnswerSelect;\n\nconst useBoundActions = () => {\n    const dispatch = useDispatch();\n    return useMemo(() => {\n        return bindActionCreators(\n            {\n                fetchAnswers: predictionActions.fetchAnswers,\n                setAnswer: predictionActions.setAnswer,\n                toggleRandom: predictionActions.toggleRandom,\n            },\n            dispatch\n        );\n    }, [dispatch]);\n};\n\n\nconst Container = baseStyled(Grid)`\n  flex: 1;\n  width: 100%;\n  margin: auto;\n  position: relative;\n`;\n","import React, {useMemo} from 'react';\nimport Timer from \"../Timer/Timer\"\nimport {predictionActions, predictionSelectors} from \"../../modules/prediction\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport {TimerStatus} from \"../../constants/timerStatus\";\nimport Button from \"../../components/Button/Button\";\nimport {bindActionCreators} from \"redux\";\nimport {timerActions, timerSelectors} from \"../../modules/timer\";\nimport {Grid} from \"@material-ui/core\";\nimport AnswerSelect from \"../AnswerSelect/AnswerSelect\";\n\nconst Header: React.FC = () => {\n    const { state, milliseconds } = useSelector(timerSelectors);\n    const { answer, prediction, answers, random } = useSelector(predictionSelectors);\n    const { setAnswer, resetTimer, abortTimer } = useBoundActions();\n    const start = () => {\n        if (random) {\n            setAnswer(answers[Math.floor(Math.random() * answers.length)]);\n        }\n        resetTimer(null);\n    };\n    return (\n        <Container className=\"Header\">\n            <AnswerText>お題 「{random && (state !== TimerStatus.WORKING) ? \"???\" : answer}」</AnswerText>\n            <Wrapper>\n                {(state === TimerStatus.WORKING) && <PredictionText>AI判定→ {prediction} ?</PredictionText>}\n                {(state === TimerStatus.WORKING) ? <Timer /> : <AnswerSelect />}\n            </Wrapper>\n            {(state === TimerStatus.INITIAL) && <Button onClick={start}>スタート</Button>}\n            {(state === TimerStatus.WORKING) && <Button onClick={() => abortTimer(null)} color={\"secondary\"}>ギブアップ</Button>}\n            {(state === TimerStatus.FINISH || state === TimerStatus.ABORT) && <Button onClick={start}>もう一回</Button>}\n            {(state === TimerStatus.FINISH) && <ResultText>記録: {(milliseconds/1000).toFixed(2)}秒</ResultText>}\n        </Container>\n    );\n};\n\nexport default Header;\n\nconst useBoundActions = () => {\n    const dispatch = useDispatch();\n    return useMemo(() => {\n        return bindActionCreators(\n            {\n                resetTimer: timerActions.resetTimer,\n                abortTimer: timerActions.abortTimer,\n                setAnswer: predictionActions.setAnswer,\n            },\n            dispatch\n        );\n    }, [dispatch]);\n};\nconst Container = styled.div`\n    text-align: center;\n`;\n\nconst Wrapper = styled.div`\n    display: flex;\n    text-align: right;\n    height: 40px;\n    margin: 0 30px;\n`;\nconst ResultText = styled(Grid)`\n  position: absolute;\n  pointer-events: none;\n  z-index: 1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  height: 20%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  background: blue;\n  font-size: 40px;\n  font-weight: bold;\n  opacity: 0.7;\n`;\nconst PredictionText = styled(Grid)`\n  margin: auto;\n`;\nconst AnswerText = styled.h2`\n  margin: auto;\n`;\n","import React from 'react';\nimport styled from \"styled-components\";\n\nconst Footer: React.FC = () => {\n    return (\n        <div className=\"Footer\">\n            <Credit>Drawing Race, 2019 megane-monkeys</Credit>\n        </div>\n    );\n};\n\nexport default Footer;\n\nconst Credit = styled.p`\n    text-align: right;\n    margin: 10px;\n`;\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport store from \"../../modules/createStore\";\nimport Canvas from \"../Canvas/Canvas\";\nimport Header from \"../Header/Header\";\nimport Footer from \"../../components/Footer/Footer\";\n\nconst App: React.FC = () => {\n  return (\n      <Provider store={store}>\n        <div className=\"App\">\n            <Header />\n            <Canvas />\n            <Footer />\n        </div>\n      </Provider>\n  );\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}